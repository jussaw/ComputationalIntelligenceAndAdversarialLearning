# dataset looks like [name,x1,x2,....]
# train the model with the dataset and input an instance.
import math
import operator
import itertools
from itertools import islice
from collections import defaultdict
from collections import Counter
from FileUtil import *


def take(n, iterable):
    "Return first n items of the iterable as a list"
    return list(islice(iterable, n))

trainingSet = createFeatureVectors("Feature Vectors/output.txt")
print(trainingSet)
#
# trainingSet = [["AlabamaDotCom_Zenitz_ALAvsLOU_wk1",401.0,0.0,0.0,0.0,0.0,0.0,0.0,9.0,0.0,0.0,0.0,0.0,21.0,6.0,27.0,0.0,5.0,7.0,5.0,2.0,0.0,5.0,1.0,6.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.0,0.0,1.0,3.0,0.0,1.0,1.0,4.0,5.0,5.0,1.0,5.0,0.0,1.0,1.0,0.0,1.0,1.0,3.0,14.0,0.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,197.0,28.0,45.0,81.0,195.0,54.0,34.0,81.0,117.0,1.0,27.0,83.0,34.0,139.0,140.0,43.0,5.0,122.0,142.0,153.0,59.0,17.0,33.0,4.0,35.0,0.0,0.0,0.0,0.0,0.0,0.0],
# ["AssociatedPress_Goodall_ALAvsLOU_wk1",871.0,0.0,18.0,0.0,0.0,0.0,0.0,15.0,2.0,2.0,0.0,0.0,31.0,27.0,49.0,0.0,12.0,21.0,19.0,2.0,5.0,10.0,5.0,10.0,5.0,4.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,5.0,12.0,4.0,3.0,3.0,1.0,13.0,11.0,11.0,1.0,8.0,1.0,6.0,0.0,9.0,1.0,1.0,14.0,30.0,0.0,0.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,373.0,66.0,83.0,162.0,453.0,87.0,88.0,205.0,240.0,1.0,30.0,133.0,77.0,269.0,304.0,65.0,11.0,228.0,237.0,342.0,98.0,37.0,84.0,6.0,63.0,0.0,0.0,0.0,0.0,0.0,0.0],
# ["BleacherReport_Nathan_ALAvsLOU_wk1",703.0,0.0,2.0,0.0,0.0,0.0,0.0,22.0,1.0,1.0,0.0,0.0,36.0,26.0,32.0,0.0,8.0,7.0,14.0,1.0,1.0,5.0,5.0,3.0,2.0,2.0,3.0,0.0,0.0,0.0,0.0,2.0,0.0,12.0,3.0,11.0,3.0,1.0,2.0,0.0,11.0,4.0,7.0,1.0,10.0,0.0,6.0,4.0,5.0,0.0,0.0,8.0,26.0,1.0,0.0,6.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,317.0,51.0,86.0,124.0,360.0,75.0,64.0,153.0,236.0,3.0,30.0,156.0,62.0,239.0,246.0,65.0,4.0,189.0,237.0,274.0,93.0,41.0,61.0,3.0,49.0,4.0,0.0,0.0,0.0,0.0,0.0],
# ["LouisvilleCourierJournal_Greer_ALAvsLOU_wk1",628.0,0.0,2.0,0.0,0.0,0.0,0.0,16.0,1.0,1.0,0.0,0.0,28.0,8.0,34.0,0.0,3.0,7.0,6.0,1.0,3.0,2.0,0.0,0.0,2.0,1.0,3.0,0.0,0.0,0.0,0.0,1.0,0.0,11.0,5.0,13.0,2.0,1.0,4.0,1.0,7.0,4.0,2.0,1.0,17.0,4.0,1.0,3.0,8.0,1.0,2.0,8.0,16.0,1.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,253.0,47.0,63.0,118.0,362.0,85.0,50.0,148.0,218.0,4.0,25.0,154.0,53.0,192.0,203.0,67.0,9.0,164.0,223.0,246.0,85.0,35.0,58.0,4.0,32.0,3.0,0.0,0.0,0.0,0.0,0.0],
# ["SBNation_Neil_ALAvsLOU_wk1",166.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.0,7.0,10.0,0.0,3.0,7.0,9.0,1.0,1.0,3.0,3.0,0.0,2.0,2.0,0.0,0.0,0.0,0.0,0.0,3.0,0.0,6.0,0.0,4.0,0.0,0.0,0.0,0.0,3.0,0.0,3.0,0.0,4.0,0.0,2.0,1.0,1.0,0.0,0.0,2.0,8.0,1.0,0.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,83.0,15.0,17.0,36.0,72.0,16.0,20.0,27.0,55.0,1.0,11.0,42.0,18.0,55.0,73.0,7.0,2.0,41.0,51.0,58.0,23.0,12.0,16.0,1.0,16.0,0.0,0.0,0.0,0.0,0.0,0.0],
# ["ScoresAndStats_FieldLevelMedia_ALAvsLOU_wk1",434.0,0.0,0.0,0.0,0.0,0.0,0.0,4.0,2.0,2.0,0.0,0.0,12.0,28.0,23.0,0.0,10.0,21.0,18.0,7.0,11.0,9.0,8.0,9.0,3.0,5.0,6.0,0.0,0.0,0.0,0.0,0.0,0.0,7.0,0.0,9.0,0.0,0.0,1.0,0.0,8.0,0.0,13.0,2.0,4.0,0.0,2.0,2.0,2.0,0.0,0.0,5.0,16.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,183.0,22.0,55.0,97.0,199.0,39.0,38.0,102.0,130.0,4.0,20.0,57.0,37.0,131.0,161.0,39.0,7.0,147.0,122.0,168.0,51.0,13.0,47.0,2.0,29.0,0.0,0.0,0.0,0.0,0.0,0.0],
# ["TDAlabamaMag_Silberman_ALAvsLOU_wk1",346.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0,2.0,17.0,0.0,5.0,3.0,3.0,0.0,1.0,3.0,1.0,4.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,9.0,0.0,4.0,1.0,1.0,0.0,0.0,1.0,2.0,7.0,0.0,6.0,1.0,1.0,0.0,5.0,0.0,0.0,3.0,8.0,0.0,0.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,148.0,29.0,45.0,64.0,180.0,48.0,34.0,83.0,123.0,1.0,14.0,56.0,46.0,110.0,120.0,24.0,8.0,96.0,115.0,143.0,47.0,19.0,31.0,0.0,23.0,0.0,0.0,0.0,0.0,0.0,0.0],
# ["WDRM1021_Black_ALAvsLOU_wk1",256.0,0.0,2.0,0.0,0.0,0.0,0.0,3.0,0.0,0.0,0.0,0.0,13.0,1.0,12.0,0.0,2.0,4.0,5.0,4.0,6.0,5.0,7.0,4.0,2.0,5.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,1.0,3.0,4.0,2.0,0.0,1.0,0.0,4.0,1.0,8.0,0.0,3.0,0.0,2.0,2.0,0.0,0.0,1.0,4.0,7.0,0.0,0.0,4.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,111.0,14.0,26.0,49.0,97.0,27.0,29.0,74.0,71.0,1.0,4.0,45.0,15.0,71.0,82.0,14.0,2.0,77.0,80.0,92.0,35.0,12.0,27.0,0.0,26.0,0.0,0.0,0.0,0.0,0.0,0.0],
# ["AlabamaDotCom_Zenitz_ALAvsLOU_wk1",402.0,0.0,0.0,0.0,0.0,0.0,0.0,10.0,0.0,0.0,0.0,0.0,21.0,6.0,27.0,0.0,5.0,7.0,5.0,2.0,0.0,5.0,1.0,6.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.0,0.0,1.0,3.0,0.0,1.0,1.0,4.0,5.0,5.0,1.0,5.0,0.0,1.0,1.0,0.0,1.0,1.0,3.0,14.0,0.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,197.0,28.0,45.0,81.0,195.0,54.0,34.0,81.0,117.0,1.0,27.0,83.0,34.0,139.0,140.0,43.0,5.0,122.0,142.0,153.0,59.0,17.0,33.0,4.0,35.0,0.0,0.0,0.0,0.0,0.0,0.0],
# ["AssociatedPress_Goodall_ALAvsLOU_wk1",877.0,0.0,18.0,0.0,0.0,0.0,0.0,10.0,2.0,2.0,0.0,0.0,31.0,27.0,49.0,0.0,12.0,21.0,19.0,2.0,5.0,10.0,5.0,10.0,5.0,4.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,14.0,5.0,12.0,4.0,3.0,3.0,1.0,13.0,11.0,11.0,1.0,8.0,1.0,6.0,0.0,9.0,1.0,1.0,14.0,30.0,0.0,0.0,2.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,373.0,66.0,83.0,162.0,453.0,87.0,88.0,205.0,240.0,1.0,30.0,133.0,77.0,269.0,304.0,65.0,11.0,228.0,237.0,342.0,98.0,37.0,84.0,6.0,63.0,0.0,0.0,0.0,0.0,0.0,0.0],
# ["BleacherReport_Nathan_ALAvsLOU_wk1",700.0,0.0,2.0,0.0,0.0,0.0,0.0,12.0,1.0,1.0,0.0,0.0,36.0,26.0,32.0,0.0,8.0,7.0,14.0,1.0,1.0,5.0,5.0,3.0,2.0,2.0,3.0,0.0,0.0,0.0,0.0,2.0,0.0,12.0,3.0,11.0,3.0,1.0,2.0,0.0,11.0,4.0,7.0,1.0,10.0,0.0,6.0,4.0,5.0,0.0,0.0,8.0,26.0,1.0,0.0,6.0,0.0,0.0,0.0,1.0,0.0,1.0,0.0,0.0,0.0,317.0,51.0,86.0,124.0,360.0,75.0,64.0,153.0,236.0,3.0,30.0,156.0,62.0,239.0,246.0,65.0,4.0,189.0,237.0,274.0,93.0,41.0,61.0,3.0,49.0,4.0,0.0,0.0,0.0,0.0,0.0],
# ["AlabamaDotCom_Zenitz_ALAvsLOU_wk1",301.0,0.0,0.0,0.0,0.0,0.0,0.0,11.0,0.0,0.0,0.0,0.0,11.0,6.0,27.0,0.0,5.0,7.0,5.0,2.0,0.0,5.0,1.0,6.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.0,0.0,1.0,3.0,0.0,1.0,1.0,4.0,5.0,5.0,1.0,5.0,0.0,1.0,1.0,0.0,1.0,1.0,3.0,14.0,0.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,197.0,28.0,45.0,81.0,195.0,54.0,34.0,81.0,117.0,1.0,27.0,83.0,34.0,139.0,140.0,43.0,5.0,122.0,142.0,153.0,59.0,17.0,33.0,4.0,35.0,0.0,0.0,0.0,0.0,0.0,0.0]
# ]
#est_instance = ["AlabamaDotCom_Zenitz_ALAvsLOU_wk1", 401.0,0.0,0.0,0.0,0.0,0.0,0.0,9.0,0.0,0.0,0.0,0.0,21.0,6.0,27.0,0.0,5.0,7.0,5.0,2.0,0.0,5.0,1.0,6.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,8.0,0.0,1.0,3.0,0.0,1.0,1.0,4.0,5.0,5.0,1.0,5.0,0.0,1.0,1.0,0.0,1.0,1.0,3.0,14.0,0.0,0.0,3.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,197.0,28.0,45.0,81.0,195.0,54.0,34.0,81.0,117.0,1.0,27.0,83.0,34.0,139.0,140.0,43.0,5.0,122.0,142.0,153.0,59.0,17.0,33.0,4.0,35.0,0.0,0.0,0.0,0.0,0.0,0.0]

def euclideanDistance(instance1, instance2, length):
    distance = 0
    for x in range(1, length):
        distance += pow((instance1[x] - instance2[x]), 2)
    return math.sqrt(distance)

def manhattanDistance(instance1, instance2, length):
    distance = 0
    for x in range(1, length):
        distance += math.fabs(instance1[x]-instance2[x])
        return distance

def majAuthor(kInstance):
    auth_names = []
    for row in kInstance:
        auth_names.append((row[0].replace('_', ' ').split(' ')[1]))
    au = Counter(auth_names)
    if (all(au[x] == 1 for x in au)) == True:
        return (auth_names[0])
    return au.most_common(1)[0][0] if au else None


def getNeighborsDistance(trainingSet, k, distanceFunction):
    my_pred = []
    for i in range(len(trainingSet)):
        test_instance = trainingSet[i]
        test_dist = []

        for j in range(len(trainingSet)):
            if trainingSet[j] != test_instance:
                #print(test_instance[0])
                #print(trainingSet[j][0])
                dist = distanceFunction(test_instance, trainingSet[j], len(test_instance))
                #distMan = manhattanDistance(test_instance, trainingSet[j], len(test_instance))
                #print(training[i][0])
                test_indv=[]
                test_indv.append(trainingSet[j][0])
                test_indv.append(dist)
                test_dist.append(test_indv)
                if j == len(trainingSet) - 1:
                    distance_ne = sorted(test_dist, key=lambda x: x[1])
                    distance_k = take(k, distance_ne)
                    bestAuth = majAuthor(distance_k)
                    test_instance_auth = test_instance[0].replace('_', ' ').split(' ')[1]
                    if bestAuth == test_instance_auth:
                       my_pred.append("yes")
        accuracy = float(len(my_pred))/float(len(trainingSet) - 1)
    return str(int(accuracy * 100))+'%'


#accuracyRate = getNeighborsDistance(trainingSet, 24)

#baseline
print("base line accuracy")
for i in range(1, len(trainingSet)):
    print("accuracy rate is: ", getNeighborsDistance(trainingSet,i, manhattanDistance),  "when k :", i)
print("improved accuracy")
for i in range(1, len(trainingSet)):
    print("accuracy rate is: ", getNeighborsDistance(trainingSet,i, euclideanDistance),  "when k :", i)

